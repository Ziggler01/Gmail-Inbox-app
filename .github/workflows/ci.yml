name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Lint • Type • Test
    runs-on: ubuntu-latest

    env:
      PYTHONVERSION: "3.11"
      # Safe test env values expected by app.main Settings (override as needed)
      OWNER_EMAIL: "test@example.com"
      GOOGLE_CLIENT_ID: "dummy-client-id"
      GOOGLE_CLIENT_SECRET: "dummy-client-secret"
      GOOGLE_REDIRECT_URI: "http://localhost/oauth/callback"
      GOOGLE_SCOPES: "https://www.googleapis.com/auth/gmail.readonly"
      DATABASE_URL: "sqlite+aiosqlite:///./test.db"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
          cache: "pip"

      - name: Install deps (prod + dev)
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install ruff black mypy pytest pytest-cov; fi

      - name: Ruff (lint)
        run: ruff check .

      - name: Black (format check)
        run: black --check .

      - name: Mypy (type check app/)
        run: mypy app

      - name: Pytest (coverage >= 40%)
        run: pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=term-missing --cov-fail-under=40

      - name: Upload coverage data (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ./.coverage*

  docker-e2e:
    name: Docker Build • Run • Endpoint Smoke
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image (cached)
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: app:ci
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          provenance: false

      - name: Run container (background)
        env:
          OWNER_EMAIL: "test@example.com"
          GOOGLE_CLIENT_ID: "dummy-client-id"
          GOOGLE_CLIENT_SECRET: "dummy-client-secret"
          GOOGLE_REDIRECT_URI: "http://localhost/oauth/callback"
          GOOGLE_SCOPES: "https://www.googleapis.com/auth/gmail.readonly"
          DATABASE_URL: "sqlite+aiosqlite:///./test.db"
        run: |
          docker rm -f appci 2>/dev/null || true
          docker run -d --name appci \
            -e OWNER_EMAIL \
            -e GOOGLE_CLIENT_ID \
            -e GOOGLE_CLIENT_SECRET \
            -e GOOGLE_REDIRECT_URI \
            -e GOOGLE_SCOPES \
            -e DATABASE_URL \
            -p 8000:8000 app:ci

      - name: Wait for app to be ready
        run: |
          set -e
          for i in $(seq 1 40); do
            if curl -fsS http://127.0.0.1:8000/reports/latest >/dev/null; then
              echo "App is ready."
              exit 0
            fi
            echo "Waiting for app... ($i/40)"
            sleep 1
          done
          echo "App did not become ready in time."
          docker logs appci || true
          exit 1

      - name: Hit /reports/latest (JSON) and assert stub status
        run: |
          body="$(curl -fsS http://127.0.0.1:8000/reports/latest)"
          echo "$body"
          echo "$body" | grep -q '"status":"stub"'

      - name: Hit /reports/latest.pdf (PDF headers & magic)
        run: |
          curl -fsSI http://127.0.0.1:8000/reports/latest.pdf | tr '[:upper:]' '[:lower:]' | grep -q 'content-type: application/pdf'
          curl -fsS  http://127.0.0.1:8000/reports/latest.pdf | head -c 4 | grep -q '%PDF'

      - name: Show container logs on failure
        if: failure()
        run: docker logs appci || true

      - name: Cleanup container
        if: always()
        run: docker rm -f appci || true
